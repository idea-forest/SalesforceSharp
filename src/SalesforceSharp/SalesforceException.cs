using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using HelperSharp;

namespace SalesforceSharp
{
    #region Enum
    /// <summary>
    /// The Salesforce REST API's error.
    /// </summary>
    public enum SalesforceError
    {
        /// <summary>
        /// Unknown error.
        /// </summary>
        Unknown,

        /// <summary>
        /// Invalid client.
        /// </summary>
        InvalidClient,

        /// <summary>
        /// Unsupported grant type
        /// </summary>
        UnsupportedGrantType,

        /// <summary>
        /// Invalid grant.
        /// </summary>
        InvalidGrant,

        /// <summary>
        /// Authentication failure.
        /// </summary>
        AuthenticationFailure,

        /// <summary>
        /// Invalid password.
        /// </summary>
        InvalidPassword,

        /// <summary>
        /// Client identifier invalid.
        /// </summary>
        ClientIdentifierInvalid
    }
    #endregion

    /// <summary>
    /// An exception generated by Salesforce REST API.
    /// </summary>
    public sealed class SalesforceException : Exception
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="SalesforceException"/> class.
        /// </summary>
        /// <param name="error">The error.</param>
        /// <param name="description">The description.</param>
        public SalesforceException(SalesforceError error, string description)
            : base(description)
        {
            Error = error;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SalesforceException"/> class.
        /// </summary>
        /// <param name="error">The error.</param>
        /// <param name="description">The description.</param>
        internal SalesforceException(string error, string description)
            : base(description)
        {
            Error = ParseError(error);
        }
        #endregion

        #region Properties
        /// <summary>
        /// Gets the error.
        /// </summary>
        /// <value>
        /// The error.
        /// </value>
        public SalesforceError Error { get; private set; }
        #endregion       

        #region Methods
        /// <summary>
        /// Parses the error.
        /// </summary>
        /// <param name="error">The error.</param>
        /// <returns></returns>
        private static SalesforceError ParseError(string error)
        {
            SalesforceError value;
            
            if(Enum.TryParse<SalesforceError>(error.Replace("_", ""), true, out value))
            {
                return value;
            }

            return SalesforceError.Unknown;
        }
        #endregion
    }
}
